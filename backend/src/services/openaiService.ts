import type { FormData } from '../types/index.js';

export const openaiService = {
  // Generate questions using OpenAI API
  async generateQuestions(promptData: FormData): Promise<string[]> {
    try {
      const openaiApiKey = process.env.OPENAI_API_KEY;
      if (!openaiApiKey) {
        throw new Error('OPENAI_API_KEY is not configured');
      }

      const prompt = `
# ËßíËâ≤
‰Ω†ÊòØ‰∏Ä‰Ωç‰∏ÄËà¨Ê∂àË≤ªËÄÖÔºåÊ≠£Â∞ãÊâæ„Äå${promptData.productsServices}„ÄçÔºà‰æãÔºöÈõ¢Â©öÂæãÂ∏´„ÄÅÊ§çÁâôË®∫ÊâÄÔºâÔºåÁõÆÊ®ôÂú∞ÂçÄ„Äå${promptData.targetRegions}„ÄçÔºåÊ∫ñÂÇôÂú® Claude / ChatGPTÔºàÊàñÂÖ∂‰ªñ AI Â∞çË©±Â∑•ÂÖ∑ÔºâËº∏ÂÖ•ÂïèÈ°å„ÄÇ

# ËÆäÊï∏
Ë°åÊ•≠‚ï±Â∞àÊ•≠È°ûÂûãÔºö${promptData.productsServices}
Âú∞ÈªûÔºö${promptData.targetRegions}
ÂÆòÁ∂≤Ôºö${promptData.brandWebsites}

# ÈóúÈçµË¶ÅÊ±Ç
ÊâÄÊúâÂïèÈ°åÂøÖÈ†à
1. ÊòéÁ¢∫Ë©¢ÂïèÂìÅÁâå‚ï±Ê©üÊßã‚ï±Â∞àÊ•≠‰∫∫Âì°ÂêçÁ®±ÔºåÊ≤íÊúâÂá∫ÁèæÂÖ∑È´îÂìÅÁâå‚ï±Ê©üÊßã‚ï±Â∞àÊ•≠‰∫∫Âì°ÂêçÁ®±ÔºåÊúÉÊúâÊé®Ëñ¶„ÄÅÂì™‰∫õÁ≠âÁî®Â≠ó
2. ÂåÖÂê´Ë©≤È†òÂüüÊ∂àË≤ªËÄÖÁöÑÂ∏∏Ë¶ãÁóõÈªû
3. Ë≤ºËøëÁúüÂØ¶Ê±∫Á≠ñÊÉÖÂ¢ÉÔºå‰∏çÈáçË§á
4. Á¨¶Âêà‰∏ÄËà¨Ê∞ëÁúæÊêúÂ∞ãÁöÑÊèêÂïèÊñπÂºèÔºåËá™ÁÑ∂„ÄÅÂè£Ë™ûÂåñ„ÄÅÁ¨¶ÂêàÂè∞ÁÅ£Âú∞ÂçÄÁøíÊÖ£
5. ÈÇèËºØÈ†ÜÊö¢ÔºåÂâçÂæåÁÑ°Ë°ùÁ™Å

# ÁØÑ‰æãÔºàÂãøË§áË£ΩÔºâ
Âè∞ÂåóÂì™Âπæ‰ΩçÁöÆËÜöÁßëÈÜ´Â∏´Âè£Á¢ëÊúÄÂ•ΩÂèà‰∏çÁî®ÊéíÈöäÊéíÂæà‰πÖÔºü

# Ëº∏Âá∫Ê†ºÂºèÔºà‰∏ÄÊ¨°Ëº∏Âá∫ ${promptData.questionsCount} È°åÔºåÂö¥Ê†ºÈÅµÂÆà‰∏ãÊñπÊ†ºÂºèÔºå‰∏çÂæóÂä†ÂÖ•ÂÖ∂‰ªñÊñáÂ≠óÊàñÁ©∫Ë°åÔºâ
1.
ÂïèÈ°åÊïòËø∞
2.
ÂïèÈ°åÊïòËø∞
      `;
      console.log('üöÄ prompt', prompt);

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${openaiApiKey}`
        },
        body: JSON.stringify({
          model: 'gpt-4',
          messages: [
            {
              role: 'user',
              content: prompt
            }
          ],
          max_tokens: 4000,
          temperature: 0.7
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`OpenAI API error: ${errorData.error?.message || response.statusText}`);
      }

      const data = await response.json();
      const questionsText = data.choices[0]?.message?.content || '';
      
      // Split the response into individual questions and clean them
      const questions = questionsText
        .split('\n')
        .map((q: string) => q.trim())
        .filter((q: string) => q.length > 0 && !q.match(/^\d+\./)) // Remove numbering

      console.log('üöÄ questions', questions);
      console.log(`‚úÖ Generated ${questions.length} questions using OpenAI`);
      return questions;
    } catch (error) {
      console.error('‚ùå Error generating questions with OpenAI:', error);
      throw error;
    }
  }
};
